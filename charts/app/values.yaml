replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # -- Specifies whether a service account should be created
  create: true
  # -- Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

# deployments revisionHistoryLimit
revisionHistoryLimit: 1

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  ports:
    - port: 80
      containerPort: 80
      name: http

# -- Classical ingress definition
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  # -- Port to use with ingress
  exposedPort: 80
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# -- Traefik v2 ingressRoute definition
ingressRoute:
  enabled: false
  entryPoint: websecure
  host: example.com
  tlsSecret: example-com-tls
  # -- Port to use with ingressRoute
  exposedPort: 80
  annotations: {}
  labels: {}

# -- Whitelist Middleware definition
middleware:
  enabled: false
  labels: {}
  sourceRange: {}
  existingMiddlewares: {}

app:
  deployment:
    strategy: RollingUpdate
    # Used only if strategy is set to RollingUpdate
    maxUnavailable: 25%
    maxSurge: 1

  # -- Deployments livenessProbe configuration
  livenessProbe: {}
  #  httpGet:
  #    path: /
  #    port: http

  # -- Deployments readinessProbe configuration
  readinessProbe: {}
  #  httpGet:
  #    path: /
  #    port: http

  # -- Environment variables to pass to main app container
  env: []
  # - name: "ENV_NAME"
  #   value: "test"

  # -- envFrom to pass to main app container
  envFrom: []
  # - configMapRef:
  #     name: config-map-name
  # - secretRef:
  #     name: secret-name

  lifecycle: {}
  #  postStart:
  #    exec:
  #      command: ["cp -R /www/default /shared/public"]

# -- Raw yaml definition of sidecar containers
sideCars: []
#  - name: sidecar
#    image: "image:tag"
#    imagePullPolicy: IfNotPresent

# -- Raw yaml definition of additional volumes
volumes: []
  # - name: nginx-config
  #   configMap:
  #    name: nginx-config

# -- Raw yaml definition of init containers
initContainers: []
  # - name: test
  #   image: alpine:3.14.2
  #   command: ["sh", "-c", "echo test"]

job:
  enabled: false
  image:
    repository: curlimages/curl
    tag: 7.82.0
  command: ["curl", "https://ifconfig.me"]
  restartPolicy: Never
  backoffLimit: 1
  annotations:
    "helm.sh/hook": pre-upgrade
  # -- Environment variables to pass to job container
  env: []
  # - name: "ENV_NAME"
  #   value: "test"
  # -- envFrom to pass to job container
  envFrom: []
  # - configMapRef:
  #     name: config-map-name
  # - secretRef:
  #     name: secret-name

podMonitor:
  enabled: false
  podMetricsEndpoints: []
  #  - port: metrics
  #  - port: web
  labels: {}

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

keda:
  enabled: false
  minReplicaCount: 2
  maxReplicaCount: 5
  triggers: []
    # - metadata:
    #    metricName: app_http_request_count
    #    query: sum(increase(app_http_request_count{path="/important-endpoint"}[2m]))
    #    serverAddress: http://prometheus.monitoring:9090
    #    threshold: '80'
    #    type: prometheus
  fallback: {}
   # failureThreshold: 3
   # replicas: 4
  advanced:
   # restoreToOriginalReplicaCount: false
   # horizontalPodAutoscalerConfig:
   #   behavior:
   #     scaleDown:
   #       stabilizationWindowSeconds: 600
   #       policies:
   #         - type: Percent
   #           value: 10
   #           periodSeconds: 15


nodeSelector: {}

tolerations: []

affinity: {}
