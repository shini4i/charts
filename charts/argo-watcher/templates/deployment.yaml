apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "argo-watcher.fullname" . }}
  labels:
    {{- include "argo-watcher.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  revisionHistoryLimit: {{ .Values.revisionHistory }}
  selector:
    matchLabels:
      {{- include "argo-watcher.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "argo-watcher.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "argo-watcher.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: app
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.containerPort }}
              protocol: TCP
          env:
            - name: ARGO_URL
              value: {{ .Values.argo.url }}
            - name: ARGO_USER
              value: {{ .Values.argo.username }}
            - name: ARGO_TIMEOUT
              value: {{ .Values.argo.timeout | quote }}
            - name: ARGO_API_TIMEOUT
              value: {{ .Values.argo.apiTimeout | quote }}
            - name: SKIP_TLS_VERIFY
              value: {{ .Values.argo.skipTlsVerify | quote }}
            - name: RLOG_LOG_LEVEL
              value: {{ .Values.logLevel | upper }}
            - name: STATE_TYPE
              {{- if .Values.postgres.enabled }}
              value: "postgres"
              {{- else }}
              value: "in-memory"
              {{- end }}
            {{- if .Values.postgres.enabled }}
            - name: DB_HOST
              value: {{ .Values.postgres.host }}
            - name: DB_PORT
              value: {{ .Values.postgres.port | quote }}
            - name: DB_NAME
              value: {{ .Values.postgres.name }}
            - name: DB_USER
              value: {{ .Values.postgres.user }}
          {{- end }}
          envFrom:
            - secretRef:
                name: {{ .Values.argo.secretName }}
            {{- if .Values.postgres.enabled }}
            - secretRef:
                name: {{ .Values.postgres.secretName }}
            {{- end }}
          {{- if .Values.healthChecks.enabled }}
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
            periodSeconds: {{ .Values.healthChecks.periodSeconds }}
            timeoutSeconds: {{ .Values.healthChecks.timeoutSeconds }}
            initialDelaySeconds: {{ .Values.healthChecks.initialDelaySeconds }}
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
            periodSeconds: {{ .Values.healthChecks.periodSeconds }}
            timeoutSeconds: {{ .Values.healthChecks.timeoutSeconds }}
            initialDelaySeconds: {{ .Values.healthChecks.initialDelaySeconds }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
